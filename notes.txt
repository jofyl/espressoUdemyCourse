BuildConfig
-----------
public final class BuildConfig {...}
how to add build variables for this?

defaultConfig {
  ...
  buildConfigField "boolean", "automatedTests", "false"
}

productFlavors {
  QATesting {
    dimension "appSource"
    buildConfigField "String", "installSource", '"QATesting"'
    buildConfigField "boolean", "automatedTests", "true"
  }
}


To view all elements in UI inspector, expand the tree and toggle off "Filter System-Defined Layers"

Component Tree and Attributes are searchable

Android Espresso seems to use a similar synthax of hamcrest matchers

One way to know more about the states of the UI is to navigate the methods that checks them:
for example, isDisplayed() => by clicking on it, it takes us to the class VideMatchers.java, here we notice:
private final Matcher<View> visibilityMatcher = withEffectiveVisibility(Visibility.VISIBLE);
effective Visibility => 80% of the item needs to be visible for it to be considered visible
Also, visibiliyt is a an enum with 3 states:
public enum Visibility {
  VISIBLE(View.VISIBLE),
  INVISIBLE(View.INVISIBLE),
  GONE(View.GONE); => view do not exist in the view 
  
hasFocus() => matches views that usually editable
or elements that are navigated to via the tab button for example

isChecked() with for checkboxes and toggles

isSelected() => when a row or item is hilighted, this one depends on the Visibility state

++++++++++
NOTE: import com.example.android.architecture.blueprints.todoapp.R
The R file needs to be imported
++++++++++

View matchers
-------------
Locating views on the screen
it always statys with onView(ViewMatcher) and this function take a view mather to locate the UI

withId(...) if espresso locates multiple elements with the same ID on the screen, it will throw an exception
=> we must locate the item in a way to make it unique
instead of withId(...), we can also use withText(...)
even when fetching by text, it is always best to us the key, since the app can support multiple languages

we can also locate views with tag keys and tag values
android:tag="@string/title_hint" => key
and in string.xml, we have
<string name="title_hint">Title</string> => value

hasContentDescription() => any description 
withContentDescription(...) => you specify the value

onView(...) return an object with type ViewInteraction

withHint(...), same as before, the element itself has a hint attribute (android:hint)
we can use nullValue(String:class.java) to get an item that has a hint with no value

spinner is like a drop down menu
withSpinnerText(...)

hasLinks() matches a view that has a link in it

Input ViewMatchers
------------------
onView(hasImeAction(EditorInfo.IME_ACTION_NEXT))
onView(hasImeAction(EditorInfo.IME_ACTION_SEARCH))
onView(hasImeAction(EditorInfo.IME_ACTION_DONE))

EditorInfo => has much more actions thant the 3 above, you can check out the .java file like usual to get an idea on what they are

IME action is the action that is shown on the keyboard: for example, when typing in a search fied, you get the search icon instead of "Done"

supportInputMethod()

onView() takes 1 matcher, so you use functions liek allOf that take many matchers to traverse views from "hamcrest"
For example:
...
import org.hamcrest.CoreMatchers.allOf
...
onView(
    allOf(
        withId(R.id.value), isDescendantOfA(
            allOf(
                withId(R.id.sales), isDescendantOfA(
                    withId(R.id.current_month)
                )
            )
        )
    )
)
...

we can use isAssignableFrom(...) to match on the a views class or from its parent class
onView(isAssignableFrom(FloatingActionButton::class.java))
we can also use withClassName, which is more specific

Hierarchy view matcher
----------------------
matching a view based on its Hierarchy in the view tree
=> usefull when there is a need to traverse in case a layout or a view for example has little info to identify it in a unique maner given the current open view

isRoot() => it can be the view that holds the whole activity or fragment
or a view that holds a dialog in case of multi-window... etc 

in the case of an open dialog for example => isRoot() will match 2 views: the dialog and the activity behind it

Root Matchers 
-------------
 onView(...).inRoot(...)
isFocusable => clicking on elipses to open a popup menu
isTouchable => something you can interact with
isDialog => when the main view is hidden behind a dialog view
isPlatformPopup => you copy a text and you want to paste it a text filed, so you get options like, autofil, paste... etc

